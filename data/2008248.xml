<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[CNS Core: Small: Toward Globally-Optimal Resource Distribution and Computation Acceleration in Multi-Tenant and Heterogeneous Machine Learning Systems]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>09/30/2023</AwardExpirationDate>
<AwardTotalIntnAmount>499910.00</AwardTotalIntnAmount>
<AwardAmount>499910</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jason Hallstrom</SignBlockName>
<PO_EMAI>jhallstr@nsf.gov</PO_EMAI>
<PO_PHON>7032920000</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In the era of large-scale deep learning (DL) and massive data, existing hardware systems have struggled to effectively accommodate heavy and complex computing workload due to difficulties in scheduling highly dynamic, heterogeneous, and competing tasks from many users over many machines in a cluster or data-center environment. This project aims to develop a "1-click" demand-aware and responsive software system capable of simultaneously training a wide spectrum of DL tasks, using a new resource management architecture that automatically and adaptively chooses the most effective distributed training/serving techniques and their hyperparameters to achieve best overall efficiency of multiple tasks in such environment.&lt;br/&gt;&lt;br/&gt;This interdisciplinary project innovates in distributed systems design, DL algorithm design, and related industrial applications and theoretical analyses, with the following thrusts:  1: Develop a framework for "ML-aware" resource management and scheduling of multiple simultaneously running training tasks. 2: Develop principled strategies for resource management and scheduling for serving, streaming, and heterogeneous-task settings. 3: Optimize memory resources for training large-parameter models by developing holistic approaches to maximize computation throughput subject to device memory bounds. A limited-scope but rigorous and practical theoretical analysis of some of the proposed architectures will also be performed. &lt;br/&gt;&lt;br/&gt;This project addresses the needs from the academic and industrial communities and will have a broad impact on both. It will provide easy-to-use tools that reduce the time to set-up and facilitate large-scale experimentation, while reducing the required costs, whether measured in cluster access quotas or dollars spent on cloud services. The impact on commercial practitioners will be even greater, by improving their productivity by an order of magnitude or more, as they must contend with heterogeneous computing and network resources that are shared among many users as well as the need to run many jobs on a regular basis.&lt;br/&gt;&lt;br/&gt;The team will release and/or open-source the code at  http://sailing-lab.wixsite.com/sailing-pmls to benefit researchers and practitioners, to share their lessons learned to advocate more research in machine learning (ML) systems problems, and also to democratize high-performance ML systems and make them accessible to non-ML-educated software developers and society at large, such as industrial and manufacturing, healthcare, biology, social science, and finance, where results may have a catalytic impact. The team will publish results at a variety of top tier conferences, including machine learning (NIPS, ICML), systems (OSDI, SOSP, USENIX), and data mining (KDD, WWW).&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>06/30/2020</MinAmdLetterDate>
<MaxAmdLetterDate>06/30/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2008248</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Xing</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric P Xing</PI_FULL_NAME>
<EmailAddress><![CDATA[epxing@cs.cmu.edu]]></EmailAddress>
<NSF_ID>000195787</NSF_ID>
<StartDate>06/30/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress><![CDATA[5000 FORBES AVE]]></StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA12</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>U3NKNFLNQ613</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM>U3NKNFLNQ613</ORG_PRNT_UEI_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>735400</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~499910</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our main goal in this awarded project is to develop a user-friendly software system that enables one-click setup for distributed machine learning and deep learning across large-scale and foundation ML models. This system intelligently manages resources, choosing optimal techniques and settings to train a variety of models efficiently in a sophisticated, multi-user computing setting.<br /> <br /> In completing the proposed research goal, we developed two major systems: Alpa and Pollux, both presented at OSDI, the top conference in computing systems. Notably, Pollux won the OSDI 2021 Best Paper Award. Alpa is a system that manages the training and serving of large-scale ML models by categorizing parallelisms into inter-operator and intra-operator types. It constructs a hierarchical structure for vast model-parallel execution plans and designs several compilation passes to automatically create computation and memory-efficient parallel execution strategies at each level of parallelism. Pollux enhances the scheduling performance in GPU clusters by adaptively optimizing interdependent factors at both the individual job level and across the entire cluster. Unlike most schedulers that merely allocate resources based on user requests&mdash;potentially leading to inefficient use&mdash;Pollux and some of the more recent schedulers determine the allocation of job resources with an eye toward optimization. Pollux takes this further by monitoring each job's performance during training to project how the &lsquo;goodput&rsquo; (a term we coined to reflect the combination of system throughput and statistical efficiency) might vary with changes in resource allocation. Pollux dynamically reassigns or adjusts resources to enhance cluster-wide goodput, balancing fairness and the continuous optimization of each large-scale ML job to make better use of allocated resources.<br /> <br /> Building on Alpa and Pollux, we have developed additional algorithms and systems. At NeurIPS 2022, we introduced AMP, a framework that automates the identification and application of effective model parallelism strategies. AMP explores a vast array of strategies and selects the most suitable ones by leveraging a cost model attuned to the diversity of the model structures and the specifications of the computing cluster. This framework excels at managing complex models featuring unevenly structured layers and clusters that incorporate a mix of GPU generations. Furthermore, at MLSys 2023, we presented AlpaComm, a library engineered to optimize communication across the different segments of a computational mesh, which is vital in distributed computing. AlpaComm segments cross-mesh communication into discrete units, enabling each part to transfer a segment of the data tensor from any set of potential senders to several receivers, while ensuring the data at all sender nodes is identical. It utilizes a streaming primitive for each task and employs a search-based algorithm to orchestrate these tasks efficiently. AlpaComm also proposes a novel pipeline scheduling technique that enhances the potential to concurrently optimize communication with computation tasks, thereby improving overall system efficiency.<br /> <br /> To enhance user experience, we have designed and implemented Redco, a tool that simplifies setting up distributed training for large language models, reducing the necessity for deep technical knowledge. Key among Redco's features are pre-set rules for model distribution and customizable functions that streamline machine learning workflows. Redco will be presented at the upcoming MLSys workshop at NeurIPS 2024.<br /> <br /> Moreover, our team has developed low-rank approximation algorithms that enhance the speed and efficiency of both pre-training and fine-tuning for foundation models, as well as software that tackles specific challenges such as private model inference and intricate meta-learning problems. These research outcomes were presented at top-tier ML and systems conferences, including MLSys and ICLR. Notably, our papers on the meta-learning library and private inference were selected for Oral (top 5%) and Spotlight (top 25%) presentations, respectively, at ICLR 2023.<br /> <br /></p> <p>Ultimately, the outcomes of our funded project have significantly streamlined and enhanced the efficiency of training and deploying cutting-edge large-scale ML and foundation models, catering to the increasing complexity of both the models and their associated data. Moreover, we have released all our software, algorithms, and datasets to benefit researchers, developers, and students across the entire systems and ML community.</p><br> <p>  Last Modified: 11/04/2023<br> Modified by: Eric&nbsp;P&nbsp;Xing</p></div> <div class="porSideCol" ></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Our main goal in this awarded project is to develop a user-friendly software system that enables one-click setup for distributed machine learning and deep learning across large-scale and foundation ML models. This system intelligently manages resources, choosing optimal techniques and settings to train a variety of models efficiently in a sophisticated, multi-user computing setting.    In completing the proposed research goal, we developed two major systems: Alpa and Pollux, both presented at OSDI, the top conference in computing systems. Notably, Pollux won the OSDI 2021 Best Paper Award. Alpa is a system that manages the training and serving of large-scale ML models by categorizing parallelisms into inter-operator and intra-operator types. It constructs a hierarchical structure for vast model-parallel execution plans and designs several compilation passes to automatically create computation and memory-efficient parallel execution strategies at each level of parallelism. Pollux enhances the scheduling performance in GPU clusters by adaptively optimizing interdependent factors at both the individual job level and across the entire cluster. Unlike most schedulers that merely allocate resources based on user requestspotentially leading to inefficient usePollux and some of the more recent schedulers determine the allocation of job resources with an eye toward optimization. Pollux takes this further by monitoring each job's performance during training to project how the goodput (a term we coined to reflect the combination of system throughput and statistical efficiency) might vary with changes in resource allocation. Pollux dynamically reassigns or adjusts resources to enhance cluster-wide goodput, balancing fairness and the continuous optimization of each large-scale ML job to make better use of allocated resources.    Building on Alpa and Pollux, we have developed additional algorithms and systems. At NeurIPS 2022, we introduced AMP, a framework that automates the identification and application of effective model parallelism strategies. AMP explores a vast array of strategies and selects the most suitable ones by leveraging a cost model attuned to the diversity of the model structures and the specifications of the computing cluster. This framework excels at managing complex models featuring unevenly structured layers and clusters that incorporate a mix of GPU generations. Furthermore, at MLSys 2023, we presented AlpaComm, a library engineered to optimize communication across the different segments of a computational mesh, which is vital in distributed computing. AlpaComm segments cross-mesh communication into discrete units, enabling each part to transfer a segment of the data tensor from any set of potential senders to several receivers, while ensuring the data at all sender nodes is identical. It utilizes a streaming primitive for each task and employs a search-based algorithm to orchestrate these tasks efficiently. AlpaComm also proposes a novel pipeline scheduling technique that enhances the potential to concurrently optimize communication with computation tasks, thereby improving overall system efficiency.    To enhance user experience, we have designed and implemented Redco, a tool that simplifies setting up distributed training for large language models, reducing the necessity for deep technical knowledge. Key among Redco's features are pre-set rules for model distribution and customizable functions that streamline machine learning workflows. Redco will be presented at the upcoming MLSys workshop at NeurIPS 2024.    Moreover, our team has developed low-rank approximation algorithms that enhance the speed and efficiency of both pre-training and fine-tuning for foundation models, as well as software that tackles specific challenges such as private model inference and intricate meta-learning problems. These research outcomes were presented at top-tier ML and systems conferences, including MLSys and ICLR. Notably, our papers on the meta-learning library and private inference were selected for Oral (top 5%) and Spotlight (top 25%) presentations, respectively, at ICLR 2023.      Ultimately, the outcomes of our funded project have significantly streamlined and enhanced the efficiency of training and deploying cutting-edge large-scale ML and foundation models, catering to the increasing complexity of both the models and their associated data. Moreover, we have released all our software, algorithms, and datasets to benefit researchers, developers, and students across the entire systems and ML community.     Last Modified: 11/04/2023       Submitted by: EricPXing]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
