<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[III: Small: Bringing database query optimization to data intensive applications]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>09/30/2024</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032927347</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern database management systems (DBMSs) employ sophisticated query optimization techniques that enable the generation of efficient execution plans for queries over very large data sets. A variety of other applications also process large data sets, but cannot leverage database-style query optimization for their code. In this project, an open-source programming language compiler will be enhanced with database-style query optimization capabilities. Data-intensive parts of ordinary programs will be executed in chunks using different execution plans. Based on feedback from earlier chunks, alternative plans might be used for later chunks. The compiler could be used for a variety of data-intensive applications, allowing all of them to benefit from this class of performance optimizations.&lt;br/&gt;&lt;br/&gt;Existing query optimization techniques for in-memory processing are limited in several ways: (a) they are not extensively used outside relational database management systems; (b) they are limited to a handful of relational operators, and do not cover access patterns or dynamically-defined functions found in other data-analysis scenarios; (c) they treat the underlying compiler as a black-box, with unpredictable performance depending on which compiler is used with which compiler settings; (d) they often bake-in design choices that may be appropriate for usage within a particular DBMS, but not for more general cases. This project directly addresses these challenges by optimizing data-analysis style queries expressed as tight loops in a conventional imperative programming language. This project will extend an open-source compiler (GraalVM/Truffle) with both known and novel optimization techniques that will automatically be applied whenever the compiler identifies that a loop is time-consuming. Integration into the compiler allows many applications to efficiently process large data sets. The system will support dynamic queries involving user-defined functions and arbitrary access patterns. Database-style and compiler optimizations will co-exist in one system, eliminating some of the mismatches that happen when the compiler is used as a black-box by a DBMS. The system will tune a variety of run-time execution parameters automatically, with minimal guidance from the programmer. The extended compiler will be validated by developing an interactive data exploration application that will allow users to dynamically specify and analyze a variety of large in-memory datasets.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>08/19/2020</MinAmdLetterDate>
<MaxAmdLetterDate>10/19/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2008295</AwardID>
<Investigator>
<FirstName>Kenneth</FirstName>
<LastName>Ross</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kenneth A Ross</PI_FULL_NAME>
<EmailAddress><![CDATA[kar@cs.columbia.edu]]></EmailAddress>
<NSF_ID>000446976</NSF_ID>
<StartDate>08/19/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Eugene</FirstName>
<LastName>Wu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eugene Wu</PI_FULL_NAME>
<EmailAddress><![CDATA[ew2493@columbia.edu]]></EmailAddress>
<NSF_ID>000690634</NSF_ID>
<StartDate>08/19/2020</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>NEW YORK</CityName>
<ZipCode>100277922</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress><![CDATA[615 W 131ST ST]]></StreetAddress>
<StreetAddress2><![CDATA[MC 8741]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY13</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>F4N1QNPB95M4</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress><![CDATA[2960 Broadway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>736400</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-63ffdb5f-7fff-d2d6-af2d-bbcf380c0f22"> </span></p>  <p dir="ltr">Matrix multiplication is the cornerstone of modern machine learning, and high performance libraries such as BLAS have been designed for machine learning use cases. &nbsp; Surprisingly, many types of database queries that form the basis of data analytics also resemble matrix multiplication, yet they do not benefit from similar types of performance optimizations. &nbsp; This causes many database use cases to perform much slower than necessary. &nbsp;In addition, many machine learning applications first rely on pre-processing to cleaning, analyze, and extract features from data before applying machine learning operations. &nbsp; While the database can perform the pre-processing steps, data is typically exported to a custom library for the machine learning steps. &nbsp;This incurs expensive data export costs. &nbsp; In all of these cases, there is potential to speed up the end-to-end process and reduce inefficiencies. &nbsp;</p>  <p dir="ltr">&nbsp;</p>  <p dir="ltr">The key challenge is that matrix multiply in machine learning follows rigid patterns, while database queries present more variations that are not applicable to existing matrix multiplication libraries. &nbsp; The goal of this project is to enable the database management system to benefit from matrix multiply optimizations for database queries. &nbsp; To this end, the major outcomes of this project included:</p>  <p dir="ltr">&nbsp;</p>  <p dir="ltr">* &nbsp;Techniques to efficiently compile queries that are matrix multiply-like into very fast custom kernels and execute them -- all within the database management system. &nbsp;</p>  <p dir="ltr">* As a result of the compilation techniques, a broad class of use cases, including machine learning applications that mix matrix multiply and database operations, can be executed efficiently within the database management system. &nbsp;</p>  <p dir="ltr">* Tools and systems that train important machine learning models like gradient boosted decision trees within any fast database management system faster and at larger scale than existing machine learning libraries.</p>  <p dir="ltr">* Opportunities for graduate and undergraduate students to participate in research projects.</p>  <p dir="ltr"><span>The publications, methodologies, tools, and techniques we have developed for this project are all publicly available at our project website:</span></p>  <p>https://cudbg.github.io/NSFQueryOpt4Apps/</p>  <p dir="ltr">&nbsp;</p>  <p>&nbsp;</p><br> <p>  Last Modified: 12/15/2024<br> Modified by: Kenneth&nbsp;A&nbsp;Ross</p></div> <div class="porSideCol" ></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[       Matrix multiplication is the cornerstone of modern machine learning, and high performance libraries such as BLAS have been designed for machine learning use cases.  Surprisingly, many types of database queries that form the basis of data analytics also resemble matrix multiplication, yet they do not benefit from similar types of performance optimizations.  This causes many database use cases to perform much slower than necessary. In addition, many machine learning applications first rely on pre-processing to cleaning, analyze, and extract features from data before applying machine learning operations.  While the database can perform the pre-processing steps, data is typically exported to a custom library for the machine learning steps. This incurs expensive data export costs.  In all of these cases, there is potential to speed up the end-to-end process and reduce inefficiencies.         The key challenge is that matrix multiply in machine learning follows rigid patterns, while database queries present more variations that are not applicable to existing matrix multiplication libraries.  The goal of this project is to enable the database management system to benefit from matrix multiply optimizations for database queries.  To this end, the major outcomes of this project included:        * Techniques to efficiently compile queries that are matrix multiply-like into very fast custom kernels and execute them -- all within the database management system.     * As a result of the compilation techniques, a broad class of use cases, including machine learning applications that mix matrix multiply and database operations, can be executed efficiently within the database management system.     * Tools and systems that train important machine learning models like gradient boosted decision trees within any fast database management system faster and at larger scale than existing machine learning libraries.    * Opportunities for graduate and undergraduate students to participate in research projects.    The publications, methodologies, tools, and techniques we have developed for this project are all publicly available at our project website:    https://cudbg.github.io/NSFQueryOpt4Apps/             Last Modified: 12/15/2024       Submitted by: KennethARoss]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
