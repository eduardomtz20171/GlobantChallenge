<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[SaTC: TTP: Small: Creating Content Verification Tools to Protect Document Integrity]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>09/30/2024</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Daniel F. Massey</SignBlockName>
<PO_EMAI>dmassey@nsf.gov</PO_EMAI>
<PO_PHON>7032925147</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Adobeâ€™s Portable Document Format (PDF) has become the standard for electronic documents. Academic and collegiate papers, business write-ups and fact sheets, advertisements for print, and anything else meant to be viewed as a final product make use of the PDF standard. End users cannot easily change the text of a PDF document, so most come to expect a degree of integrity present in all PDF documents encountered. Nevertheless, content masking attacks were discovered against the content integrity of PDF documents themselves. Specifically, these attacks cause humans to view a masked version of the content these computer systems read. This project will create techniques and tools to deal with content masking attacks against document integrity, and has the potential to significantly impact on the research and engineering effort in the field of document security, due to the wide use of digital documents in government and commercial entities. With the substantial security enhancement for PDF content integrity, the project could promote the wide adoption of PDF content verification tools in today's data loss prevention systems.&lt;br/&gt;&lt;br/&gt;This project will improve the state-of-the-art in document security via creating a set of defense tools to assure the integrity of documents. The research team aims at (i) designing a lightweight PDF font verification tool that can effectively verify the integrity of font files embedded into documents; (ii) understanding the impact of adversarial machine learning on document integrity; (iii) creating an advanced content verification tool, which integrates functionalities of random partition, feature extraction, and decision aggregation, to address content masking attacks leveraging the adversarial machine learning techniques; and (iv) performing comprehensive evaluation to ensure the efficiency, reliability, and security of the designed content integrity verification tools.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>08/28/2020</MinAmdLetterDate>
<MaxAmdLetterDate>10/13/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2024300</AwardID>
<Investigator>
<FirstName>Zhuo</FirstName>
<LastName>Lu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhuo Lu</PI_FULL_NAME>
<EmailAddress><![CDATA[zhuolu@usf.edu]]></EmailAddress>
<NSF_ID>000671130</NSF_ID>
<StartDate>08/28/2020</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Yao</FirstName>
<LastName>Liu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yao Liu</PI_FULL_NAME>
<EmailAddress><![CDATA[yliu21@usf.edu]]></EmailAddress>
<NSF_ID>000637233</NSF_ID>
<StartDate>08/28/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name><![CDATA[University of South Florida]]></Name>
<CityName>TAMPA</CityName>
<ZipCode>336205800</ZipCode>
<PhoneNumber>8139742897</PhoneNumber>
<StreetAddress><![CDATA[4202 E FOWLER AVE]]></StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>15</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL15</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>NKAZLXLL7Z91</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTH FLORIDA</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of South Florida]]></Name>
<CityName>Tampa</CityName>
<StateCode>FL</StateCode>
<ZipCode>336205350</ZipCode>
<StreetAddress><![CDATA[4202 E. Fowler Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>15</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL15</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>806000</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Adobe&rsquo;s Portable Document Format (PDF) has become the standard for electronic documents. Attacks were discovered against the content integrity of PDF documents themselves. For example, using one or more custom fonts, an attacker may cause a word to be rendered as another word by switching the glyph mapping within the font file. This is referred as a content masking attack, as humans are caused to view a masked version of the content these computer systems read. This project aims to create effective content verification tool to deal with these attacks, to assure the integrity of PDF documents. Upon the completion of this project, we have obtained the following results.</p> <p>1. We found that an embedded malicious font file can make a reader to see any content that an attacker chooses. More importantly, existing systems, such as search engine crawlers and email spam detection systems, only retrieve the underlying content but ignore potential font mapping security issues. We discovered a new attack method that exploits carefully crafted malicious fonts. In addition to PDF document, the malicious fonts can further affect HTML and E-mail content, causing the content of the surface layer rendered as arbitrary content and the failure of abnormality detection.</p> <p>2. By examining attack surface from various angles, we identified potential customers who are vulnerable to the content masking attack and hence interested in securing their document systems. For example, we evaluated 19 popular PDF readers and online document signing services, including Adobe Acrobat, Foxit, Nitro, PDF Editor, Soda PDF, DocuSign, PandaDoc, etc. We found that only 3 out of the 19 selected applications are secure against content masking attack, but the rest of the applications have the content masking vulnerabilities that can be abused by an attacker to compromise the PDF signature. We found that none of the mainstream anti-virus software, including Kaspersky, Microsoft, and McAfee, inspects a font for the violation of font integrity nor do they mark font installation or uninstallation as a sensitive security event.</p> <p>3. We found that the PDF signing process can be easily hacked by exploiting unembedded fonts. Many public PDF documents are vulnerable to such attacks. Documents containing popular fonts with higher unembedded rates, such as Courier and Helvetica, are more susceptible than those using &ldquo;safer&rdquo; fonts like Calibri. Furthermore, some PDF producer applications may not be aware of the threat of the PDF signature deception attack, as we do not observe any consistent behavior in font embeddedness.</p> <p>4. We found that for a web page that uses local fonts, the attacker could make a target victim, who visits this web page, see the web content different from the underlying content by deceiving the victim to download and effect a malicious font on the victim&rsquo;s local computer. This attack can take advantage of the use of Unicode, which supports the encoding and display of thousands of characters in various languages. The Unicode scheme provides the attacker with a greatly expanded attack surface.</p> <p>5. From the experiments, we found that content masking attacks pose a serious threat to the authenticity and integrity of the &ldquo;sender&rdquo; field in emails, and email service providers should consider using remote fonts to display this field to protect their users. This will help ensure that users can trust the emails they receive and prevent attackers from using these attacks to mislead or deceive users.</p> <p>6. We found that barcode and QR code generators utilize pre-defined font files to generate encoded images. This can generate a new attack surface that may allow adversaries to effectively alter the entire encoded data of the barcode and QR code to deceive both the creator and the scanner of the barcode, rendering them unaware of the manipulated encoded code. Given that barcode and QR codes are not easily verifiable by human eyes through optical means, an attacker can subtly modify the extracted text by the scanner. We have confirmed via experiments that the multiple real-world applications and libraries are vulnerable to this attack.</p> <p>&nbsp;</p><br> <p>  Last Modified: 10/03/2024<br> Modified by: Yao&nbsp;Liu</p></div> <div class="porSideCol" ></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Adobes Portable Document Format (PDF) has become the standard for electronic documents. Attacks were discovered against the content integrity of PDF documents themselves. For example, using one or more custom fonts, an attacker may cause a word to be rendered as another word by switching the glyph mapping within the font file. This is referred as a content masking attack, as humans are caused to view a masked version of the content these computer systems read. This project aims to create effective content verification tool to deal with these attacks, to assure the integrity of PDF documents. Upon the completion of this project, we have obtained the following results.   1. We found that an embedded malicious font file can make a reader to see any content that an attacker chooses. More importantly, existing systems, such as search engine crawlers and email spam detection systems, only retrieve the underlying content but ignore potential font mapping security issues. We discovered a new attack method that exploits carefully crafted malicious fonts. In addition to PDF document, the malicious fonts can further affect HTML and E-mail content, causing the content of the surface layer rendered as arbitrary content and the failure of abnormality detection.   2. By examining attack surface from various angles, we identified potential customers who are vulnerable to the content masking attack and hence interested in securing their document systems. For example, we evaluated 19 popular PDF readers and online document signing services, including Adobe Acrobat, Foxit, Nitro, PDF Editor, Soda PDF, DocuSign, PandaDoc, etc. We found that only 3 out of the 19 selected applications are secure against content masking attack, but the rest of the applications have the content masking vulnerabilities that can be abused by an attacker to compromise the PDF signature. We found that none of the mainstream anti-virus software, including Kaspersky, Microsoft, and McAfee, inspects a font for the violation of font integrity nor do they mark font installation or uninstallation as a sensitive security event.   3. We found that the PDF signing process can be easily hacked by exploiting unembedded fonts. Many public PDF documents are vulnerable to such attacks. Documents containing popular fonts with higher unembedded rates, such as Courier and Helvetica, are more susceptible than those using safer fonts like Calibri. Furthermore, some PDF producer applications may not be aware of the threat of the PDF signature deception attack, as we do not observe any consistent behavior in font embeddedness.   4. We found that for a web page that uses local fonts, the attacker could make a target victim, who visits this web page, see the web content different from the underlying content by deceiving the victim to download and effect a malicious font on the victims local computer. This attack can take advantage of the use of Unicode, which supports the encoding and display of thousands of characters in various languages. The Unicode scheme provides the attacker with a greatly expanded attack surface.   5. From the experiments, we found that content masking attacks pose a serious threat to the authenticity and integrity of the sender field in emails, and email service providers should consider using remote fonts to display this field to protect their users. This will help ensure that users can trust the emails they receive and prevent attackers from using these attacks to mislead or deceive users.   6. We found that barcode and QR code generators utilize pre-defined font files to generate encoded images. This can generate a new attack surface that may allow adversaries to effectively alter the entire encoded data of the barcode and QR code to deceive both the creator and the scanner of the barcode, rendering them unaware of the manipulated encoded code. Given that barcode and QR codes are not easily verifiable by human eyes through optical means, an attacker can subtly modify the extracted text by the scanner. We have confirmed via experiments that the multiple real-world applications and libraries are vulnerable to this attack.        Last Modified: 10/03/2024       Submitted by: YaoLiu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
