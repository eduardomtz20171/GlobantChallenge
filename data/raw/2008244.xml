<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[SHF: Small: Content-Aware Mapping of Streaming AI Workloads on Heterogeneous Edge Devices]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2020</AwardEffectiveDate>
<AwardExpirationDate>06/30/2024</AwardExpirationDate>
<AwardTotalIntnAmount>498262.00</AwardTotalIntnAmount>
<AwardAmount>498262</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Humans can seamlessly detect and classify objects from a wide range of complex data sources, and draw inferences to make predictions and decisions. New types of algorithms known as deep neural networks (DNN), are being developed to endow computers with very same capabilities.  The present approach of transferring all the data to a remote datacenter and have the algorithms executed there is not sustainable because the amount of data being generated is growing exponentially, is too slow, and can compromise privacy and security. The aim of this project is to enable the execution of complex DNN algorithms at or near the place of data acquisition. Referred to as "AI at the edge", nearly all the leading industries are developing varieties of new "edge devices" to be deployed in the field. This project will develop a framework consisting of technology agnostic software tools that will optimally deploy the DNN algorithms on heterogenous networks of edge devices to maximize their performance and energy efficiency. Domains that will benefit from the outcomes of this project, include retail, security, transportation and logistics, factory automation, healthcare etc. The project team will also include graduate and undergraduate students. Strong effort to recruit students from underrepresented groups will be made. The team will also vigorously pursue various avenues for commercialization. &lt;br/&gt;&lt;br/&gt;The aim of this project is to enable "AI at the Edge" using DNN algorithms, which can be trained on any kind of data, in any number of dimensions, and then used to extract valuable information for automated prediction, classification, and decision making. Sophisticated DNN models can involve 100s of layers and tens of millions of parameters.  Because training is computation and memory intensive, it is performed on servers. However, for performing inference at the edge, industry is building hardware accelerators that implement DNNs in silicon, integrating them with their mobile Systems on Chips (SoC)s to be deployed at the edge, each with their own architectures, memory organization and neuromorphic engines.  Furthermore, complex ML applications will be expressed as heterogeneous Networks of Models (NoMs) of DNNs operating on streaming data.  The key challenges to be addressed in this project are to determine how to optimally map NoMs, whose structure keeps changing depending the content of the data, onto a network of heterogeneous edge computing devices. The optimization will involve replicating and pipelining DNN models and deciding on which edge computing device to deploy each instance of a model, all at run-time. Furthermore, this determination will be based on the content of the data stream, the available resources, the characteristics of the communication medium, as well as the present allocation of models to devices. The outcomes of this project will include technology agnostic algorithms and software tools for performing this mapping.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>06/16/2020</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2008244</AwardID>
<Investigator>
<FirstName>Sarma</FirstName>
<LastName>Vrudhula</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sarma Vrudhula</PI_FULL_NAME>
<EmailAddress><![CDATA[vrudhula@asu.edu]]></EmailAddress>
<NSF_ID>000124788</NSF_ID>
<StartDate>06/16/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name><![CDATA[Arizona State University]]></Name>
<CityName>TEMPE</CityName>
<ZipCode>852813670</ZipCode>
<PhoneNumber>4809655479</PhoneNumber>
<StreetAddress><![CDATA[660 S MILL AVENUE STE 204]]></StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ04</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>NTLHJXM55KZ6</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>ARIZONA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Arizona State University]]></Name>
<CityName>Tempe</CityName>
<StateCode>AZ</StateCode>
<ZipCode>852816011</ZipCode>
<StreetAddress><![CDATA[PO box 876011]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>287800</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>779800</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>075Z</Code>
<Text>Artificial Intelligence (AI)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~498262</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Edge computing involves processing data near its source, rather than relying on distant centralized data centers. This strategy aims to minimize latency and bandwidth usage by bringing computation and storage closer to where it's needed, like IoT and mobile devices. This approach enhances efficiency by enabling sensors to perform tasks such as data filtering, preprocessing, and real-time analytics locally. By processing data locally, edge computing improves response times, reduces data traffic to centralized servers, and enhances system efficiency. Its applications span autonomous vehicles, smart cities, industrial automation, and augmented reality, where low latency and high reliability are essential.</p> <p>&nbsp;The emergence of artificial intelligence and machine learning is now driving the demand to have edge devices execute the complex ML algorithms for object identification, classification, and decision analytics right at the point where the data is captured. These algorithms are expressed as&nbsp;<em>trained</em>&nbsp;deep neural networks (DNN) that first detect specific types or classes of objects (e.g., people, cars, etc) and then use customized DNNs to further process each individual type of object (e.g. identify relevant features of objects). Thus, the computation involves processing a&nbsp;<em>network of models&nbsp;</em>(NoM), each model being a DNN requiring tens of millions of floating-point operations.&nbsp;&nbsp;Typical edge processors do not have the memory or compute power required to process networks of DNNs, let alone do it in real-time.&nbsp;</p> <p>&nbsp;<strong>Intellectual Merit:&nbsp;&nbsp;</strong>The project explored two methods for implementing "AI at the Edge". In one approach, known as computation offloading (CF), the system comprises a low-power, constrained processor (referred to as U) and a more powerful local server (E), termed a cloudlet, which substitutes the cloud server. The work on CF led to the development of innovative algorithms for real-time distribution of computations between U and E, a capability currently unavailable in commercial systems. These methods take into account key factors such as communication latency and energy between U and E, WiFi reliability, varying bandwidth, and variable execution times of each deep neural network (DNN) on U and E. Two optimization objectives were considered: (1) minimizing U's energy consumption while considering all factors, and (2) extending the first to minimize U's energy consumption under latency constraints. Lightweight algorithms were devised and tested on contemporary systems, where U was a Raspberry Pi 3 and E was an NVIDIA Jetson TX2 processor for energy minimization. Optimal computation distribution reduced energy usage by 30% compared to running computations solely on U and 23% compared to using E alone. When subject to latency constraints, U was a NVIDIA Jetson Nano and E was a Titan XP GPU. The new optimization algorithm significantly reduced energy consumption by 59%, 47%, and 64% respectively compared to scenarios where DNNs were executed solely on E, solely on U, or randomly distributed between them.</p> <p>We developed new algorithms to allocate DNN models across various processors within a mobile multi-processor system-on-chip (MpSoC) module, commonly found in smartphones and IoT devices with energy constraints. Modern MpSoCs feature multiple CPU, GPU, DSP cores, and sometimes neuromorphic processors, posing the challenge of optimizing resource utilization across all cores simultaneously. This optimization varies based on input batch sizes and scene complexity. Our solution was demonstrated on a Qualcomm Snapdragon 865 MpSoC, achieving substantial improvements in execution time compared to baseline, CPU-only, GPU-only, and Central Queue schedulers: up to 32%, 6.67X, 5.60X, and 2.17X faster, respectively.</p> <p>Current approaches often drop frames when processing deadlines are missed over several frames, leading to poor video quality. We expanded our scheduling and allocation algorithm to balance between end-to-end accuracy and performance trade-offs. This approach significantly enhanced performance, reducing missed deadlines by 11X and 12.3X, and improving average accuracies by approximately 34% and 40% compared to two leading methods. This underscores the necessity for an adaptable scheduler capable of handling dynamic workloads in real-time.</p> <p><strong>Broader Impacts:&nbsp;</strong>The work done on this project advanced the state-of-the-art in edge computing and algorithms developed are ready to be incorporated by companies that make mobile MpSoCs. Further, domains that will benefit from the outcomes of this project, include retail, security, transportation and logistics, factory automation, healthcare, and many more. The project helped students gain skill beyond research. It&nbsp;supported two PhD students fulltime and two other PhD students partially. &nbsp;One of them is a female student. These students were given extensive training in writing, preparing presentations and giving oral presentations in different formats, and delivering presentations to industry and academic forums.&nbsp;&nbsp;One PhD student graduated and is now a tenure-track assistant professor. The other is expected to graduate in Fall 2024. In the final year of the project, three undergraduate students (one female) and one female high school student were recruited on this project. The project resulted in the completion of one Bachelor thesis.</p> <p>&nbsp;</p><br> <p>  Last Modified: 07/10/2024<br> Modified by: Sarma&nbsp;Vrudhula</p></div> <div class="porSideCol" ></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Edge computing involves processing data near its source, rather than relying on distant centralized data centers. This strategy aims to minimize latency and bandwidth usage by bringing computation and storage closer to where it's needed, like IoT and mobile devices. This approach enhances efficiency by enabling sensors to perform tasks such as data filtering, preprocessing, and real-time analytics locally. By processing data locally, edge computing improves response times, reduces data traffic to centralized servers, and enhances system efficiency. Its applications span autonomous vehicles, smart cities, industrial automation, and augmented reality, where low latency and high reliability are essential.   The emergence of artificial intelligence and machine learning is now driving the demand to have edge devices execute the complex ML algorithms for object identification, classification, and decision analytics right at the point where the data is captured. These algorithms are expressed astraineddeep neural networks (DNN) that first detect specific types or classes of objects (e.g., people, cars, etc) and then use customized DNNs to further process each individual type of object (e.g. identify relevant features of objects). Thus, the computation involves processing anetwork of models(NoM), each model being a DNN requiring tens of millions of floating-point operations.Typical edge processors do not have the memory or compute power required to process networks of DNNs, let alone do it in real-time.   Intellectual Merit:The project explored two methods for implementing "AI at the Edge". In one approach, known as computation offloading (CF), the system comprises a low-power, constrained processor (referred to as U) and a more powerful local server (E), termed a cloudlet, which substitutes the cloud server. The work on CF led to the development of innovative algorithms for real-time distribution of computations between U and E, a capability currently unavailable in commercial systems. These methods take into account key factors such as communication latency and energy between U and E, WiFi reliability, varying bandwidth, and variable execution times of each deep neural network (DNN) on U and E. Two optimization objectives were considered: (1) minimizing U's energy consumption while considering all factors, and (2) extending the first to minimize U's energy consumption under latency constraints. Lightweight algorithms were devised and tested on contemporary systems, where U was a Raspberry Pi 3 and E was an NVIDIA Jetson TX2 processor for energy minimization. Optimal computation distribution reduced energy usage by 30% compared to running computations solely on U and 23% compared to using E alone. When subject to latency constraints, U was a NVIDIA Jetson Nano and E was a Titan XP GPU. The new optimization algorithm significantly reduced energy consumption by 59%, 47%, and 64% respectively compared to scenarios where DNNs were executed solely on E, solely on U, or randomly distributed between them.   We developed new algorithms to allocate DNN models across various processors within a mobile multi-processor system-on-chip (MpSoC) module, commonly found in smartphones and IoT devices with energy constraints. Modern MpSoCs feature multiple CPU, GPU, DSP cores, and sometimes neuromorphic processors, posing the challenge of optimizing resource utilization across all cores simultaneously. This optimization varies based on input batch sizes and scene complexity. Our solution was demonstrated on a Qualcomm Snapdragon 865 MpSoC, achieving substantial improvements in execution time compared to baseline, CPU-only, GPU-only, and Central Queue schedulers: up to 32%, 6.67X, 5.60X, and 2.17X faster, respectively.   Current approaches often drop frames when processing deadlines are missed over several frames, leading to poor video quality. We expanded our scheduling and allocation algorithm to balance between end-to-end accuracy and performance trade-offs. This approach significantly enhanced performance, reducing missed deadlines by 11X and 12.3X, and improving average accuracies by approximately 34% and 40% compared to two leading methods. This underscores the necessity for an adaptable scheduler capable of handling dynamic workloads in real-time.   Broader Impacts:The work done on this project advanced the state-of-the-art in edge computing and algorithms developed are ready to be incorporated by companies that make mobile MpSoCs. Further, domains that will benefit from the outcomes of this project, include retail, security, transportation and logistics, factory automation, healthcare, and many more. The project helped students gain skill beyond research. Itsupported two PhD students fulltime and two other PhD students partially. One of them is a female student. These students were given extensive training in writing, preparing presentations and giving oral presentations in different formats, and delivering presentations to industry and academic forums.One PhD student graduated and is now a tenure-track assistant professor. The other is expected to graduate in Fall 2024. In the final year of the project, three undergraduate students (one female) and one female high school student were recruited on this project. The project resulted in the completion of one Bachelor thesis.        Last Modified: 07/10/2024       Submitted by: SarmaVrudhula]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
