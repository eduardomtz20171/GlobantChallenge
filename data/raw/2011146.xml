<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[FoMR: A Software and Hardware Co-Design for Addressing the Performance Bottlenecks in Secure Non-Volatile Memory]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2020</AwardEffectiveDate>
<AwardExpirationDate>06/30/2024</AwardExpirationDate>
<AwardTotalIntnAmount>330000.00</AwardTotalIntnAmount>
<AwardAmount>330000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern computer systems increasingly integrate NVM (non-volatile memory) as part of main memory, e.g., the Intel Optane Persistent Memory module. While such integration effectively addresses the large capacity demands of modern applications, there is an increasing concern on the security of NVM-based computer servers. While Intel SGX (Software Guard eXtensions) achieves high-level security protection, it faces dramatic performance degradation on NVM-based memory systems. This project aims to address the performance issues in SGX-based secure NVM systems without compromising the security requirements. Given the large global footprint of computer servers that rely on Intel SGX to provide security, this project will have an impact by enabling an efficient and secure operating environment for computer programs. This project also enhances undergraduate and graduate education with outreach to under-represented groups.&lt;br/&gt;&lt;br/&gt;By developing hardware-assisted zero-copy page remapping and parallel remapping techniques, it enables secure and low-cost dynamic remapping of insecure pages to SGX memory. By developing compiler-assisted user-controlled paging, it reduces the page reuse distances such that the total number of page remaps between the SGX memory and the untrusted memory can be significantly reduced. By developing cache contents based Merkle tree techniques for secure NVM, it enables the adoption of write-back replacement policy for metadata caches and thus effectively reduces the number of NVM writes. This project enables the delivery of simple yet effective software and hardware components that dramatically enhance performance in secure NVM.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>07/07/2020</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2011146</AwardID>
<Investigator>
<FirstName>Xulong</FirstName>
<LastName>Tang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xulong Tang</PI_FULL_NAME>
<EmailAddress><![CDATA[tax6@pitt.edu]]></EmailAddress>
<NSF_ID>000811227</NSF_ID>
<StartDate>07/07/2020</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Youtao</FirstName>
<LastName>Zhang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Youtao Zhang</PI_FULL_NAME>
<EmailAddress><![CDATA[zhangyt@cs.pitt.edu]]></EmailAddress>
<NSF_ID>000104863</NSF_ID>
<StartDate>07/07/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jun</FirstName>
<LastName>Yang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jun Yang</PI_FULL_NAME>
<EmailAddress><![CDATA[juy9@pitt.edu]]></EmailAddress>
<NSF_ID>000106419</NSF_ID>
<StartDate>07/07/2020</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name><![CDATA[University of Pittsburgh]]></Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152600001</ZipCode>
<PhoneNumber>4126247400</PhoneNumber>
<StreetAddress><![CDATA[4200 FIFTH AVENUE]]></StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA12</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>MKAGLD59JRL1</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF PITTSBURGH - OF THE COMMONWEALTH SYSTEM OF HIGHER EDUCATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pittsburgh]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152132303</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>779800</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>021Z</Code>
<Text>Industry Partnerships</Text>
</ProgramReference>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>8585</Code>
<Text>NSF/Intel Partnership Projects</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~330000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />With increasing demand for large capacity memory due to the proliferation of chip multiprocessors for high performance, graphic and cloud applications, modern computer systems are gradually integrating NVM (non-volatile memory) as part of main memory. The Intel's Optane Persistent Memory Module is the most recent commercial available product that delivers many of the promises that researchers anticipated.However, a major concern associated with NVM-based computing servers is their security. In particular, data reside on NVM preserve across system reboots. While Intel's SGX (Software Guard eXtensions) creates secure execution environment for achieving high level security protection, its integration with NVM-based memory system tends to introduce dramatical performance degradation.&nbsp;</p> <p>To ensure persistence in secure NVM, we proposed and developed CacheTree to mitigate the integrity verification overhead for secure NVMs. By constructing extra Merkle trees (MTs) on top of metadata cache, CacheTree helps to authenticate the volatile cache contents, which enables the adoption of write-back policy and prevents frequent NVM writes in persisting metadata. We adopted CacheTree to address the integrity verification in secure NVM, in particular, the overheads in persisting message authentication codes (for protecting the integrity of user data at memory line level) and persisting the main MT (for protecting the integrity of the whole memory space)</p> <p>To secure memory access patterns, we adopted ORAM (oblivious RAM) protocols and observed significant performance degradation and low utilization of memory space. We proposed and developed IR-ORAM that consists of a set of techniques to reduce the memory intensity of each type of primitives in Path-ORAM while ensuring the obliviousness at the same time. We reduce the number of data blocks to access for each tree path, reduce the number of path accesses for position maps, and convert many dummy path accesses to early write-backs of dirty data in LLC.&nbsp;</p> <p>To mitigate the inefficient memory space utilization in Ring ORAM, we proposed and developed AB-ORAM that dynamically tracks dead blocks and adaptively allocates them to buckets that demand reshuffle. It also adopts a statically fixed but non-uniform bucket space allocation strategy to reduce memory space demand without mild performance impacts. This is viable because allocating large buckets to tree levels close to the leaves exhibits diminishing benefits while the corresponding space demand increases dramatically.</p> <p>To further reduce the verification overhead using different hash trees, we developed PCPT to optimize tree organization for cloud servers with large amount of data to protect. PCPT consists of three methods including 1) parallelizing the memory accesses along a tree path to shorten the critical path, 2) compressing data cache lines and storing counters together with the data to reduce meta data accesses, and 3) prefetching in a tree-aware manner.</p> <p>During the course of the project, we also investigated the secure memory performance running differnt types of benchmark programs at the software level. We then proposed code transformation techniques to minimize memory accesses by exploiting the program access locality. we leverage bipartite graph matching to extend the proposed fine-granular integrated loop-layout strategy to multicore settings.</p> <p>We disseminated the project findings with peer-reviewed conference and journal publications, as well as talks and meetings with peer researchers from different institutes. This project provides partial fund to support two female PhD students and one MS student to conduct their thesis research. Both PhD students graduated in 2024. The findings in this project were also integrated in graduate courses, which helped to educate the students with advanced security and memory technologies and exposed them with challenges in future software and hardware system designs.&nbsp;</p><br> <p>  Last Modified: 10/31/2024<br> Modified by: Youtao&nbsp;Zhang</p></div> <div class="porSideCol" ></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   With increasing demand for large capacity memory due to the proliferation of chip multiprocessors for high performance, graphic and cloud applications, modern computer systems are gradually integrating NVM (non-volatile memory) as part of main memory. The Intel's Optane Persistent Memory Module is the most recent commercial available product that delivers many of the promises that researchers anticipated.However, a major concern associated with NVM-based computing servers is their security. In particular, data reside on NVM preserve across system reboots. While Intel's SGX (Software Guard eXtensions) creates secure execution environment for achieving high level security protection, its integration with NVM-based memory system tends to introduce dramatical performance degradation.   To ensure persistence in secure NVM, we proposed and developed CacheTree to mitigate the integrity verification overhead for secure NVMs. By constructing extra Merkle trees (MTs) on top of metadata cache, CacheTree helps to authenticate the volatile cache contents, which enables the adoption of write-back policy and prevents frequent NVM writes in persisting metadata. We adopted CacheTree to address the integrity verification in secure NVM, in particular, the overheads in persisting message authentication codes (for protecting the integrity of user data at memory line level) and persisting the main MT (for protecting the integrity of the whole memory space)   To secure memory access patterns, we adopted ORAM (oblivious RAM) protocols and observed significant performance degradation and low utilization of memory space. We proposed and developed IR-ORAM that consists of a set of techniques to reduce the memory intensity of each type of primitives in Path-ORAM while ensuring the obliviousness at the same time. We reduce the number of data blocks to access for each tree path, reduce the number of path accesses for position maps, and convert many dummy path accesses to early write-backs of dirty data in LLC.   To mitigate the inefficient memory space utilization in Ring ORAM, we proposed and developed AB-ORAM that dynamically tracks dead blocks and adaptively allocates them to buckets that demand reshuffle. It also adopts a statically fixed but non-uniform bucket space allocation strategy to reduce memory space demand without mild performance impacts. This is viable because allocating large buckets to tree levels close to the leaves exhibits diminishing benefits while the corresponding space demand increases dramatically.   To further reduce the verification overhead using different hash trees, we developed PCPT to optimize tree organization for cloud servers with large amount of data to protect. PCPT consists of three methods including 1) parallelizing the memory accesses along a tree path to shorten the critical path, 2) compressing data cache lines and storing counters together with the data to reduce meta data accesses, and 3) prefetching in a tree-aware manner.   During the course of the project, we also investigated the secure memory performance running differnt types of benchmark programs at the software level. We then proposed code transformation techniques to minimize memory accesses by exploiting the program access locality. we leverage bipartite graph matching to extend the proposed fine-granular integrated loop-layout strategy to multicore settings.   We disseminated the project findings with peer-reviewed conference and journal publications, as well as talks and meetings with peer researchers from different institutes. This project provides partial fund to support two female PhD students and one MS student to conduct their thesis research. Both PhD students graduated in 2024. The findings in this project were also integrated in graduate courses, which helped to educate the students with advanced security and memory technologies and exposed them with challenges in future software and hardware system designs.     Last Modified: 10/31/2024       Submitted by: YoutaoZhang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
